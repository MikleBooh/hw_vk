GIT Homework 1

Для выполнения задания у вас должен быть установлен для Windows - GitBash.
Создан аккаунт в GitHub

Все шаги сценария выполняйте в терминале GitBush, Terminal, в папке под гитом.

Как отправить ДЗ на проверку.
 1. Создайте текстоовый файл как в первом ДЗ по Terminal.
 2. Сценарий перенесите в этот файл.
 3. На против каждого действия - напишите команду в GitBash

Файл со сценарием и ссылку на свой гит хаб отправляйте менторам на проверку.

JSON
 4. Создать внешний репозиторий c названием JSON. 
 5. Клонировать репозиторий JSON на локальный компьютер.	 git clone https://github.com/MikleBooh/JSON.git
 6. Внутри локального JSON создать файл “new.json”.	 touch new.json
 7. Добавить файл под гит.	 git add new.json
 8. Закоммитить файл.  git commit -m "add json file"
 9. Отправить файл на внешний GitHub репозиторий. git push --force
 10. Отредактировать содержание файла “new.json” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате JSON.	vim new.json
 11. Отправить изменения на внешний репозиторий.  git commit -m "edit new.json"	git push
 12. Создать файл preferences.json	 touch preference.json
 13. В файл preferences.json добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате JSON. vim preference.json
 14. Создать файл sklls.json добавить информацию о скиллах которые будут изучены на курсе в формате JSON	vim skills.json
 15. Отправить сразу 2 файла на внешний репозиторий.	git add preference.json skills.json 	git commit -m "add preference.json skills.json"		git push
 16. На веб интерфейсе создать файл bug_report.json.
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. На веб интерфейсе модифицировать файл bug_report.json, добавить баг репорт в формате JSON.
 19. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 20. Синхронизировать внешний и локальный репозиторий JSON 	git pull


XML
 21. Создать внешний репозиторий c названием XML.
 22. Клонировать репозиторий XML на локальный компьютер.	 git clone https://github.com/MikleBooh/XML.git
 23. Внутри локального XML создать файл “new.xml”.	touch new.xml
 24. Добавить файл под гит.		 git add new.xml
 25. Закоммитить файл.  git commit -m "asdd new.xml"
 26. Отправить файл на внешний GitHub репозиторий.	 git push
 27. Отредактировать содержание файла “new.xml” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате XML.	vim new.xml
 28. Отправить изменения на внешний репозиторий.  git commit -m "edite new.xml"		git push
 29. Создать файл preferences.xml	touch preferences.xml
 30. В файл preferences.xml добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате XML.	vim preference.xml
 31. Создать файл sklls.xml добавить информацию о скиллах которые будут изучены на курсе в формате XML	touch skills.xml vim skills.xml
 32. Сделать коммит в одну строку.	  git add preferences.xml skills.xml | git commit -am "make and edit two files"
 33. Отправить сразу 2 файла на внешний репозиторий. git push
 34. На веб интерфейсе создать файл bug_report.xml.
 35. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 36. На веб интерфейсе модифицировать файл bug_report.xml, добавить баг репорт в формате XML.
 37. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 38. Синхронизировать внешний и локальный репозиторий XML	git pull
 
 TXT
 1. Создать внешний репозиторий c названием TXT.
 2. Клонировать репозиторий TXT на локальный компьютер. git clone https://github.com/MikleBooh/TXT.git
 3. Внутри локального TXT создать файл “new.txt”.  touch add new.txt
 4. Добавить файл под гит.  git add new.txt
 5. Закоммитить файл.	git commit -m "created file new.txt"
 6. Отправить файл на внешний GitHub репозиторий. git push
 7. Отредактировать содержание файла “new.txt” - написать информацию о себе (ФИО, возраст, количество домашних животных, будущая желаемая зарплата). Всё написать в формате TXT.
 8. Отправить изменения на внешний репозиторий.  git commit -m "change new.txt" | git push
 9. Создать файл preferences.txt	touch preferences.txt
 10. В файл preferences.txt” добавить информацию о своих предпочтениях (Любимый фильм, любимый сериал, любимая еда, любимое время года, сторона которую хотели бы посетить) в формате TXT.	vim preferences.txt
 11. Создать файл sklls.txt добавить информацию о скиллах которые будут изучены на курсе в формате TXT	touch skills.txt
 12. Сделать коммит в одну строку.	git add skills.txt preferences.txt | git commit -m "created skills.txt preferences.txt"
 13. Отправить сразу 2 файла на внешний репозиторий.	git push
 14. На веб интерфейсе создать файл bug_report.txt.
 15. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 16. На веб интерфейсе модифицировать файл bug_report.txt, добавить баг репорт в формате TXT.	
 17. Сделать Commit changes (сохранить) изменения на веб интерфейсе.
 18. Синхронизировать внешний и локальный репозиторий TXT	git pull
 
 GitHub. HW_2
1. На локальном репозитории сделать ветки для:	git branch branch_name
- Postman
- Jmeter
- CheckLists
- Bag Reports
- SQL
- Charles
- Mobile testing

2. Запушить все ветки на внешний репозиторий  git push -u origin
3. В ветке Bag Reports сделать текстовый документ со структурой баг репорта touch bug_reports.txt	 vim bug_reports.txt
4. Запушить структуру багрепорта на внешний репозиторий git add bug_reports.txt		git commit -m "add bug reports" git push
5. Вмержить ветку Bag Reports в Main 	git merge Bag_Reports -m "merge bag_reporta"
6. Запушить main на внешний репозиторий.	git push
7. В ветке CheckLists набросать структуру чек листа.	 git checkout CheckLists	touch Checklist.txt		
8. Запушить структуру на внешний репозиторий	git add Checklist.txt	 git commit -m "add checklists.txt" 	git push 
9. На внешнем репозитории сделать Pull Request ветки CheckLists в main
10. Синхронизировать Внешнюю и Локальную ветки Mainpo