HW
Client_Server
1) Прочиать про клиент-серверную архитектуру
2) Что ткое HTTP и HTTPS
3) HTTP методы
4) HTTP статус коды сервера
5) Что такое ядро браузера 
6) Какие браузеры какиие ядра используют
7) Что такое API
8. Что такое ендпоинты
9) URL (URI, URL, URN)
10) Идемпотентные HTTP методы
11) Безопасные HTTP методы
12) Иденфикация, Аутентификация, Авторизация
13) Что такое IP
14) Что такое октаты в DNS
15) Что такое порт, сколько портов у Linux сервера
16) Уровни OSI
17) Хедеры http запросов

1) Client_server
Client - отправляет запрос, request - запрос. Клиентом может быть любой девайс или приложение. 
Server - отвечает на запрос, response - ответ. Сервер может быть клиентом, он может спрашивать у других серверов.
Дата центр - много серверов.
Http server - программа, работающая по протоколу http, принимает http запрос, отправляет http ответ. Запросы должны быть отправлены методом http. 
API - application program interface. Интерфейс через который возможно общаться с сервером. У человека интерфейс - лицо, глаза, уши. 
html - HyperText Markup Language «язык гипертекстовой разметки»
css - Cascading Style Sheets «каскадные таблицы стилей»
base64 -Base64 — стандарт кодирования двоичных данных при помощи только 64 символов ASCII. Алфавит кодирования содержит латинские символы A-Z, a-z, цифры 0-9 (всего 62 знака) и 2 дополнительных символа, зависящих от системы реализации. Каждые 3 исходных байта кодируются 4-мя символами (увеличение на ¹⁄₃).
Эта система широко используется в электронной почте для представления бинарных файлов в тексте письма (транспортное кодирование).
Идентификация - когда в БД найдены данные о логин пароле. Например из реквеста клиента на операцию логин, по индпоинту «логин», сервер расшифровывает данные из запроса POST, где в Body лежит JSON текст с логином. Затем запрашивает у БД, наличие таких данных в БД, БД отвечает что есть такой логин в системе. Далее сервер запрашивает у бд проверку пароля по логину, если данные верны, то происходит Аутентификация. Происходит проверка на доступ к данным (личные и тп.) и где-то тут происходит Авторизация.

2) Клиент – локальный компьютер на стороне виртуального пользователя, который выполняет отправку запроса к серверу для возможности предоставления данных или выполнения определенной группы системных действий.

Сервер – очень мощный компьютер или специальное системное оборудование, которое предназначается для разрешения определенного круга задач по процессу выполнения программных кодов. Он выполняет работы сервисного обслуживания по клиентским запросам, предоставляет пользователям доступ к определенным системным ресурсам, сохраняет данные или БД.
Особенности такой модели заключаются в том, что пользователь отправляет определенный запрос на сервер, где тот системно обрабатывается и конечный результат отсылается клиенту. В возможности сервера входит одновременное обслуживание сразу нескольких клиентов.
Если одновременно поступает более одного запроса, то такие запросы устанавливаются в определенную очередь и сервером выполняются по очереди. Порой запросы могут иметь свои собственные приоритеты. Часть запросов с более высокими приоритетами будут постоянно выполняться в первоочередном порядке!

Параметры, которые могут реализоваться на стороне сервера:
Хранение, защита и доступ к данным;
Работа с поступающими клиентскими запросами;
Процесс отправки ответа клиенту.

Параметры, которые могут реализоваться на стороне клиента:
Площадка по предоставлению пользовательского графического интерфейса;
Формулировка запроса к серверу и его последующая отправка;
Получение итогов запроса и отправка дополнительной группы команд (запросы на добавление, обновление информации, удаление группы данных).

Архитектура системы клиент-сервер формулирует принципы виртуального общения между локальными компьютерами, а все правила и принципы взаимодействия находятся внутри протокола.

Сетевой протокол – это особый набор правил, на основании которого выполняется точное взаимодействие между компьютерами внутри виртуальной сети.

2) HTTP - это протокол, позволяющий получать различные ресурсы, например HTML-документы. Протокол HTTP лежит в основе обмена данными в Интернете. HTTP является протоколом клиент-серверного взаимодействия, что означает инициирование запросов к серверу самим получателем, обычно веб-браузером (web-browser). Полученный итоговый документ будет (может) состоять из различных поддокументов, являющихся частью итогового документа: например, из отдельно полученного текста, описания структуры документа, изображений, видео-файлов, скриптов и многого другого.

HTTPS - (HyperText Transfer Protocol Secure) — расширение протокола HTTP для поддержки шифрования в целях повышения безопасности. Данные в протоколе HTTPS передаются поверх криптографических протоколов TLS или устаревшего в 2015 году SSL. В отличие от HTTP с TCP-портом 80, для HTTPS по умолчанию используется TCP-порт 443.
HTTPS не является отдельным протоколом. Это обычный HTTP, работающий через шифрованные транспортные механизмы SSL и TLS. Он обеспечивает защиту от атак, основанных на прослушивании сетевого соединения — от снифферских атак и атак типа man-in-the-middle, при условии, что будут использоваться шифрующие средства и сертификат сервера проверен и ему доверяют.

3) HTTP методы.
Запросы содержат следующие элементы:
HTTP-метод, обычно глагол подобно GET, POST или существительное, как OPTIONS или HEAD, определяющее операцию, которую клиент хочет выполнить. Обычно, клиент хочет получить ресурс (используя GET) или передать значения HTML-формы (используя POST), хотя другие операция могут быть необходимы в других случаях.
Путь к ресурсу: URL ресурсы лишены элементов, которые очевидны из контекста, например без протокола (http://), домена (здесь developer.mozilla.org), или TCP порта (здесь 80).
Версию HTTP-протокола.
Заголовки (опционально), предоставляющие дополнительную информацию для сервера.
Или тело, для некоторых методов, таких как POST, которое содержит отправленный ресурс.

HTTP определяет множество методов запроса, которые указывают, какое желаемое действие выполнится для данного ресурса. Несмотря на то, что их названия могут быть существительными, эти методы запроса иногда называются HTTP глаголами. Каждый реализует свою семантику, но каждая группа команд разделяет общие свойства: так, методы могут быть безопасными, идемпотентными или кешируемыми.

GET запрашивает представление ресурса. Запросы с использованием этого метода могут только извлекать данные.
HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа.
POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере.
PUT заменяет все текущие представления ресурса данными запроса.
DELETE удаляет указанный ресурс.
CONNECT устанавливает "туннель" к серверу, определённому по ресурсу.
OPTIONS используется для описания параметров соединения с ресурсом.
TRACE выполняет вызов возвращаемого тестового сообщения с ресурса.
PATCH используется для частичного изменения ресурса.
Безопасный метод - Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции “только чтение” (read-only). Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются также идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или DELETE.
Идемпотентный метод - сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций. Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные методы являются идемпотентными.
Кешируемые ответы - это HTTP-ответы, которые могут быть закешированы, то есть сохранены для дальнейшего восстановления и использования позже, тем самым снижая число запросов к серверу. Не все HTTP-ответы могут быть закешированы.

4) Коды ответа HTTP
Код ответа (состояния) HTTP показывает, был ли успешно выполнен определённый HTTP запрос. Коды сгруппированы в 5 классов:

Информационные 100 - 199
Успешные 200 - 299
Перенаправления 300 - 399
Клиентские ошибки 400 - 499
Серверные ошибки 500 - 599

5) Что такое ядро браузера 6) Какие браузеры какиие ядра используют
Браузер != Браузерный движок
Браузер = оболочка + ядро (движек) 
Trident  - ядро IE. Земля пухом (стекловатой)
Blink - открытый исходный код, ответвление движка WebKit. Самый популярный браузерный движок. Он входит в состав проекта Chromium. Именно на основе Chromium создают собственные браузеры.
Gecko - открытый исходный код. Активно развивается компаний Mozilla и используется в собственном браузере компании — Firefox. Так же используется в браузере Tor Browser обеспечивающий анонимное пребывание в сети.
WebKit - открытый исходный код. Развивается компанией Apple и используется в собственном браузере компании — Safari. Ранее многие компании использовали в своих разработках WebKit, но после покинули проект и переключились на Blink от Google.
EdgeHTML - закрытый исходный код. Проприетарная лицензия. Движок используется для браузера компании Microsoft под названием Edge, который пришёл на смену Internet Explorer. Это их новый движок. Предыдущий Trident (MSHTML) компания прекратила развивать.

7) Что такое API.
API (Application Programming Interface — программный интерфейс приложения, или интерфейс программирования приложений) — специальный протокол для взаимодействия компьютерных программ, который позволяет использовать функции одного приложения внутри другого.
Пользователи работают с GUI — graphical user interface. Программы работают с API — Application programming interface. Им не нужна графика, только контракт.

8) Что такое ендпоинты.
Эндпоинт (в переводе с англ. — конечная точка) представляет собой некий шлюз, который соединяет серверные процессы приложения с внешним интерфейсом. Простыми словами, это адрес, на который отправляются сообщения.
Эндпоинты работают вместе с методами API. Это определенные URL-адреса, которые приложение использует для связи со сторонними службами и своими пользователями. URL — это роут, который может обрабатывать разные методы запроса. Каждый тип запроса — это отдельный эндпоинт.

9) URL (URI, URL, URN)
URI - Uniform Resource Identifier (унифицированный идентификатор ресурса)
URL - Uniform Resource Locator (унифицированный определитель местонахождения ресурса)
URN - Unifrorm Resource Name (унифицированное имя ресурса)

10) Идемпотентные HTTP методы
Идемпотентный метод - сделанный один или несколько раз подряд, имеет один и тот же эффект, не изменяющий состояние сервера. Другими словами, идемпотентный метод не должен иметь никаких побочных эффектов (side-effects), кроме сбора статистики или подобных операций. Корректно реализованные методы GET, HEAD, PUT и DELETE идемпотентны, но не метод POST. Также все безопасные методы являются идемпотентными.

11) Безопасные HTTP методы
Безопасный метод - Метод HTTP является безопасным, если он не меняет состояние сервера. Другими словами, безопасный метод проводит операции “только чтение” (read-only). Несколько следующих методов HTTP безопасные: GET, HEAD или OPTIONS. Все безопасные методы являются также идемпотентными, как и некоторые другие, но при этом небезопасные, такие как PUT или DELETE.

12) Иденфикация, Аутентификация, Авторизация
Идентификация — процедура, в результате выполнения которой для субъекта идентификации выявляется его идентификатор, однозначно определяющий этого субъекта в информационной системе.
Для начала система запрашивает логин, пользователь его указывает, система распознает его как существующий — это идентификация.
Аутентификация — процедура проверки подлинности, например проверка подлинности пользователя путем сравнения введенного им пароля с паролем, сохраненным в базе данных.
После этого Google просит ввести пароль, пользователь его вводит, и система соглашается, что пользователь, похоже, действительно настоящий, раз пароль совпал, — это аутентификация.
Скорее всего, Google дополнительно спросит еще и одноразовый код из SMS или приложения. Если пользователь и его правильно введет, то система окончательно согласится с тем, что он настоящий владелец аккаунта, — это двухфакторная аутентификация.
Авторизация — предоставление определенному лицу или группе лиц прав на выполнение определенных действий.

13) Что такое IP
Internet Protocol Address по сути, IP-адрес – это идентификатор, позволяющий передавать информацию между устройствами в сети: он содержит информацию о местоположении устройства и обеспечивает его доступность для связи. IP-адреса позволяют различать компьютеры, маршрутизаторы и веб-сайты в интернете и являются важным компонентом работы интернета.

14) Что такое октаты в DNS
DNS (Domain Name System). DNS — это технология, которая позволяет браузеру вроде Firefox, Chrome или Edge найти запрошенный пользователем сайт по его имени.
Когда пользователь вводит в адресной строке браузера имя сайта, например google.com, компьютер запрашивает IP-адрес этого сайта на специальном DNS-сервере и после получения корректного ответа открывает сам сайт. 
Другими словами, ДНС нужен для поиска нужного айпишника по введенному URI.
 
14) Что такое октаты в DNS
Октеты - часть структуры днс запроса. Один октет имеет восемь двоичных разрядов, он же байт.

15) Что такое порт, сколько портов у Linux сервера
Просто идентификатор, чтобы определить получателя.
Пакет идет до IP адреса вашего компьютера.
А куда дальше? Кто будет этот пакет обрабатывать, кому он предназначен? Может это часть видефильма который вы смотрите, может это пакет сообщения для мессенджера, может это обновление для виндовс.
Вот чтобы определить кому именно на компьютере адресован пакет, используют порт.
Программы договариваются что будут пересылать данные друг для друга с определенной пометкой (номер порта).
В итоге когда пакет приходит компьютер по номеру порта отдает его соответствующей программе которая подписана на этот порт.
IP адрес — это номер квартиры друга.
Порт — это комната, в которой живёт друг
Количество портов ограничено с учётом 16-битной адресации (216=65536, начало — «0»).

16) Уровни OSI
Модель OSI Open System Interconnection  является эталонной и характеризует взаимодействие сетевого оборудования. Иными словами, посредством неё общаются такие устройства, как ПК с сетевыми картами, коммутаторы, роутеры.
Инкапсуляция - процесс превращения данных в биты
Деинкапсуляция - наоборот.
Происходит каждый раз при отправке или приеме данных.

17) Хедеры http запросов
Заголовки HTTP - позволяют клиенту и серверу отправлять дополнительную информацию с HTTP запросом или ответом. В HTTP-заголовке содержится не чувствительное к регистру название, а затем после (:) непосредственно значение. Пробелы перед значением игнорируются.
Все заголовки разделяются на четыре основных группы:
General Headers (рус. Основные заголовки) — должны включаться в любое сообщение клиента и сервера.
Request Headers (рус. Заголовки запроса) — используются только в запросах клиента.
Response Headers (рус. Заголовки ответа) — только для ответов от сервера.
Entity Headers (рус. Заголовки сущности) — сопровождают каждую сущность сообщения.